{"name":"regex-features","tagline":"","body":"####MY GUIDE TO BACKREFERENCING IN REGULAR EXPRESSIONS\r\n![](http://cdn.business2community.com/wp-content/uploads/2014/04/url.gif)\r\n\r\n\r\nToday I learned about regex backreferencing and numbered capture groups.\r\n\r\nAs well as grouping a section of a regular expression, parentheses also create a numbered capture group, which can be referred to in the replacement string using a backreference.\r\n\r\nConsider the following string:\r\n````\r\nvar string = 'I work every day except monday, tuesday, wednesday and thursday';\r\n````\r\nIf I want to remove the `'day'` from `'monday, tuesday, wednesday and thursday'`, I can use the `.replace()` method with a regex:\r\n\r\n`````\r\nvar res = string.replace(/\\b(\\w{3,})day\\b/g, '$1')\r\n`````\r\n`/\\b(\\w{3,})day\\b/g` will match 'day' at the end of a 6+ letter word.\r\n`(\\w{3,})` will store the 3+ alphanumeric symbols accessed by the `\\w{3,}`. That is all of the letters before `'day'` for each day of the week (so the `'mon'` of `'monday'`, the `'tues'` of `'tuesday'` etc.).\r\n`'$1'` will backreference what was stored by the first parentheses and therefore replace `'monday'` with `'mon'`, tuesday with `'tues'` etc.\r\n\r\nSo after all that, returning `res` gives:\r\n````\r\n'I work every day except mon, tues, wednes and thurs'\r\n````\r\n`$1-$99` can backreference up to 99 sets of parentheses in JavaScript.\r\n\r\n###Further Resources\r\n* [Regular Expressions 101](https://regex101.com) explains exactly what your regex code will do to a string as you type it. Save and send links for comparison and feedback.\r\n* [Use of parentheses for grouping and capturing in regex code](http://www.regular-expressions.info/brackets.html)\r\n* [Using numbered backreferences](http://www.regular-expressions.info/brackets.html)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}